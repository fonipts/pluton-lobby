import sys
import os
import re
app_setting_var = {
    "default": {
        "import":[],
        "value":["@package_name.health"],
        "append":[]
    },
    "graphbox": {
        "import":[],
        "value":["graphene_django","graph_schema.myapp","graph_schema.myproject"],
        "append":[]
    },
    "drf": {
        "import":[],
        "value":["corsheaders","rest_framework","@package_name.apphealth"],
        "append":[]
    },
    "ninja": {
        "import":[],
        "value":["corsheaders"],
        "append":[]
    }

}


DATABASE_RAW = '''
({   
    @condition{
        database == "postgres"
    }
    @content{
    DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": quote_plus(config("DB_PASSWORD")),
        "HOST": config("DB_HOST"),
        "PORT": config("DB_PORT")
        }
    }
}   
    @end{}    
    @condition{
        database == "mysql"
    }
    @content{
    DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": quote_plus(config("DB_PASSWORD")),
        "HOST": config("DB_HOST"),
        "PORT": config("DB_PORT")
    }
}
    }

})
'''

def main():
    
    types = sys.argv[1]
    package_name = sys.argv[2]
    arguments = sys.argv[3]
    directory = os.getcwd()

    if types == "setting_app":
        file_loc = os.path.join(
                directory, package_name,package_name, "settings.py"
            )
        app_import = app_setting_var[arguments]["import"]
        app_value = app_setting_var[arguments]["value"]
        app_append = app_setting_var[arguments]["append"]
        with open(file_loc,"r") as read_file:
            content  =read_file.read()
            results = re.findall(r"(INSTALLED_APPS[\s\n]{0,}\=[\s\n]{0,}\[\n[\n\s\'\"\w\.\,]{0,}\])",content)
            if len(results) >0:
                get_replace_install = results[0]

                content_replace  = get_replace_install.replace("\n]","\n"+",\n".join([ '    "'+x.replace("@package_name",package_name)+'"' for x in app_value])+"\n]")
                content  = content.replace(get_replace_install,content_replace)
                content =content+"\n".join([x for x in app_append])+"\n"
                if arguments == "drf":
                    content = content+'''\n
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10
}\n'''

                if arguments in ["drf","ninja"]:
                    content = content+'''
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000"
    ]\n
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000"
]\n
CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)'''   

                write_file(file_loc,content)

    if types == "setting_db_app":
        file_loc = os.path.join(
                directory, package_name,package_name, "settings.py"
            )
        with open(file_loc,"r") as read_file:
            content  =read_file.read()
            results = re.findall(r"(DATABASES[\s\n]{0,}\=[\s\n]{0,}\{[\n\s\"\'\w\d\:\{\}\.\,\/\\]{1,}\})",content)
            if len(results) >0:
                get_replace_install = results[0]
                content = """
from decouple import config\n
from urllib.parse import quote_plus\n\n
"""+content
                content  = content.replace(get_replace_install,DATABASE_RAW)
                write_file(file_loc,content)

def write_file(file,content):
    with open(file, "w", encoding="utf-8") as f_write:
        f_write.write(content)
        f_write.close()
if __name__ == "__main__":
    main()
